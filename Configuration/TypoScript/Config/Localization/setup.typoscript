/*
  ----------------------------------
  | T3v Testing Localization Setup |
  ----------------------------------
*/

config {
  # --- General ---

  # sys_language_uid (int)
  #
  # This property holds the value of the field `uid` of a record of the table `sys_language`. Various parts of the Frontend rendering code
  # will select records which are assigned to this language. See `SELECT` for more information. Internally this value is used to initialize
  # the TypoScriptFrontendController `$GLOBALS['TSFE']->sys_language_uid` property. The `$GLOBALS['TSFE']->sys_language_content` property is
  # set based on the value of the `sys_language_uid` and other settings like `sys_language_mode`.
  sys_language_uid = 0

  # sys_language_isocode_default (string)
  #
  # The ISO 639-1 language code for the default language.
  sys_language_isocode_default = en

  # sys_language_isocode (string)
  #
  # The ISO 639-1 language code for the according language. By default this is being set by `TSFE:sys_language_isocode`.
  # The value is derived from the ISO code that is stored within the `sys_language` record. The value can be overridden, which was retrieved
  # that way, with this setting.
  #
  # The ISO code is also used for the language attribute of the HTML tag.
  # sys_language_isocode = en

  # language (string)
  #
  # The language key, see `stdWrap.lang` for more information.
  #
  # The value must correspond to the key used for the Backend system language if there is one.
  # See inside `typo3/sysext/core/Classes/Localization/Locales.php` or look at the translation page on <typo3.org> for the official 2-byte
  # key for a given language. Notice that selecting the official key is important if you want to get labels in the correct language from
  # `locallang` files.
  #
  # If the language you need is not yet a system language in TYPO3 you can use an artificial string of your choice and provide values for
  # it via a TypoScript template where the property `_LOCAL_LANG` for most plugins will provide a way to add and override values for labels.
  # The keys to use must be looked up in the corresponding locallang files.
  language = en

  # language_alt (string)
  #
  # If `config.language` is used, this can be set to another language key which will be used for labels if a label was not found for the
  # main language. For instance a brazil portuguese website might specify `pt` as alternative language which means the portuguese label will
  # be shown if none was available in the main language, brazil portuguese. This feature makes sense if one language is incompletely
  # translated and close to another language.
  # language_alt = pt

  # locale (string)
  #
  # The locale for the according language.
  locale = en_US

  # locale_all (string)
  #
  # See <www.php.net> or `locale -a` for a list of values.
  #
  # `TSFE->localeCharset` is intelligently set to the assumed charset of the locale strings. This is used in `stdWrap.strftime` to convert
  # locale strings to the UTF-8 of the Frontend.
  #
  # Example:
  #
  # locale_all = danish
  # locale_all = da_DK
  #
  # This will render dates in danish made with `stdWrap` or `strftime`.
  locale_all = en_US.UTF-8

  # --- Translation handling ---

  # sys_language_mode (string)
  #
  # Configures what the system should do when a page is not translated to the requested language.
  #
  # It is only evaluated when `sys_language_uid` is greater than `0` and the requested page translation is NOT available. Internally this
  # setting corresponds to `$GLOBALS['TSFE']->sys_language_content`.
  #
  # The syntax is `[keyword];[value]`.
  #
  # Possible keywords are:
  #
  # [empty] or not set:
  #
  # If not set and the page is not translated, the system will behave as if the default language was requested. In that case both
  # `$GLOBALS['TSFE']->sys_language_content` and `$GLOBALS['TSFE']->sys_language_uid` will be set to `0`.
  #
  # `content_fallback` (recommended):
  #
  # The system will always operate with the selected language even if the page is not translated and has no page overlay record. This will
  # keep menus etc. translated. However, the content on the page can still fall back to another language, defined by the value of this
  # keyword, e.g. `content_fallback;1,3,0`, to fall back to the content of `sys_language_uid` with `1`, after that to the content of
  # `sys_language_uid` with `3` and if that is not present either, to `0`, which is the default.
  #
  # Note that the fallback affects all content of the page. This means that once a translated page record is found in the fallback chain,
  # the system will try to use this language for the rendering even if there is no properly translated content.
  #
  # `strict`:
  #
  # If the requested translation does not exist, the system will report a Page Not Found (404) error. Basically this means that all pages
  # with gray background in the `Web > Info` / Localization overview module will fail (they would otherwise fall back to default language in
  # one way or another).
  #
  # `ignore`:
  #
  # The system will stay with the selected language even if the page is not translated and there is no content available for this language,
  # so you can handle that situation on your own then. The system will render the page and the content as if the translation would exist.
  # Internally `$GLOBALS['TSFE']->sys_language_content` is set to the value of `$GLOBALS['TSFE']->sys_language_uid`.
  #
  # Refer to the Frontend Localization Guide for an in-depth discussion.
  sys_language_mode = ignore

  # sys_language_overlay (boolean / keyword)
  #
  # Defines whether TYPO3 should use the content overlay technique when fetching translated content. Content overlay means, fetching records
  # from the default language first and then replacing specific fields with the translation.
  #
  # It is only evaluated when `$TSFE->sys_language_content > 0`. Internally it sets the property `$TSFE->sys_language_contentOL` at a
  # request. Further calls via `$TSFE->sys_page->getRecordOverlay` receive this value to see if overlaying should take place.
  #
  # The requirements for this is that the table is configured with `languageField` and `transOrigPointerField` in the `[ctrl]` section of
  # `$GLOBALS['TCA']`. Also, exclusion of certain fields can be done with the `l10n_mode` directive in the field-configuration of
  # `$GLOBALS['TCA']`.
  #
  # For backend administration this requires that you configure the `Web > Page` module to display content elements accordingly; That each
  # default element is shown and next to it any translation found. This configuration can be done with Page TSconfig for a section of the
  # website using the object path `mod.web_layout.defLangBinding = 1`.
  #
  # Possible values:
  #
  # `0`:
  #
  # Just fetch records from the selected language as given by `$TSFE->sys_language_content`. No overlay will happen, no fetching of the
  # records from the default language. This boils down to `free mode` language handling. This is the only mode which shows records without a
  # default language parent. An exception to this rule can be made with the TypoScript `CONTENT` object if you manually set
  # `select.includeRecordsWithoutDefaultTranslation = 1`.
  #
  # `1`:
  #
  # Fetch records from the default language and overlay them with translations. If a record is not translated the default language will be
  # used.
  #
  # `hideNonTranslated`:
  #
  # Fetch records from the default language and overlay them with translations. If some record is not translated it will not be shown.
  sys_language_overlay = 0

  # --- Misc ---

  # Sets the `class` and `lang` attributes of the `html` tag:
  htmlTag_setParams = class="global en no-js" lang="en"
}

/*
  === Locales ===
*/

/*
  --- Germany: Deutsch ---
*/

[siteLanguage("languageId") == 1]
  config {
    sys_language_uid = 1
    sys_language_isocode = de
    language = de
    locale = de_DE
    locale_all = de_DE.UTF-8
    htmlTag_setParams = class="de-de de no-js" lang="de"
  }
[global]
